package streamTest;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.stream.IntStream;

public class StreamTest {
	
	public static void main(String[] args) {
		
//		시작점과 끝점을
//		IntStream.range(0, 10);
//		IntStream.rangeClosed(0, 10);
		
//		forEach()
//		IntStream.range(0, 10).forEach(num -> {System.out.println(num);});
//		IntStream.range(0, 5).forEach(num -> {System.out.println(num + 10);});
		
//		ArrayList<Integer> numbers = new ArrayList<Integer>(Arrays.asList(10, 20, 30, 40, 50));
//		System.out.println(numbers);
		
//		일반적인 for문
//		for(int i = 0; i < numbers.size(); i++) {
//			System.out.println(numbers.get(i));
//		}
//		
//		향상된 for문, 빠른 for문
//		for(int number : numbers) {
//			System.out.println(number);
//		}
//		
//		Stream forEach
//		numbers.forEach((num)-> {System.out.println(num);});
//		참조형 (소속::메서드)
//		numbers.forEach(System.out::println);
	
//		인덱스가 있는 자료구조
//		ArrayList<Integer> datas2 = new ArrayList<Integer>(Arrays.asList(1, 2, 3, 4, 5, 6, 7));
//		datas2.forEach(System.out::println);

//		ArrayList<Integer> datas3 = new ArrayList<Integer>();
//		datas3.forEach((num) -> { datas3.add(5); });
//		IntStream.range(0, 10).forEach((num) -> { datas3.add(num * 5); });
//		System.out.println(datas3);
		
//		ArrayList<Integer> numbers = new ArrayList<Integer>();
//		IntStream.rangeClosed(1, 10).forEach((num) -> { numbers.add(11 - num); });
//		1) 10~1까지 ArrayList 담기, 단 Arrays.asList() 쓰지 말기
//		2) ArrayList에 있는 값 출력하기
//		System.out.println(numbers);
//		numbers.forEach((n)->{ System.out.println(n);});
		
//		3) ArrayList에 있는 값 인덱스 0부터 4까지 삭제하기
//		IntStream.range(0, 5).forEach((num) -> { numbers.remove(0); });
//		numbers.forEach(System.out::println);
//		System.out.println(numbers);
		
		String datas = "ABCDEFG";
//		문자열 Stream : chars()
//		datas.chars().forEach(System.out::println);
		datas.chars().forEach(c-> {System.out.println((char)c);});
		
//		map() : 기존 값을 다른 값으로 변경, 맵은 반드시 return 해야한다.
		ArrayList<Integer> datas2 = new ArrayList<Integer>(Arrays.asList(1, 2, 3, 4, 5, 6, 7));
		datas2.stream().map(n -> n + 20).forEach(n -> {System.out.println(n);});
		IntStream.range(0, 5).map(n -> n+10).map(n -> n - 5).forEach(System.out::println);
		
		
	}
}

















